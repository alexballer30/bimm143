---
title: "Class06"
author: "A16329021"
format: pdf
---

---
title: "Class 06: R Functions"
author: "A16329021"
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. We call a function to read data, compute stuff, plot stuff, etc. etc.

R making writing functions accessible but we should always start by trying to get a working snippet of code first before we write our function.

## Todays lab

We will grade a whole class of student assignments. We will always try to start with a simlified version of the problem. 

If we want the average we can use the 'mean()' fucntion:

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```
```{r}
mean(student1)
```


Let's be nice instructors and drop the lowest score so the answer here should be 100


I can use the 'min()' fucntion to find the lowest value 

```{r}
min(student1)
```

I found the 'which.min()' function that may be useful here. How does it work? Lets just try it:

```{r}
student1
which.min(student1)
```

I can use minus syntax trick to get everything but the element with the min value 
```{r}
student1[-8]
```

```{r}
mean(student1[-which.min(student1)])
```

Let's test on the other students
```{r}
student2
mean(student2[-which.min(student2)])
```

where is the problem 
```{r}
mean(student2, na.rm = TRUE)
```

```{r}
student3
```

```{r}
```


```{r}
mean(student3, na.rm=TRUE)
```



I want to stop working with 'student1', 'student2' etc. and typing it out every time so let instead work with an input called 'x'

```{r}
#x <- student2
#x
```

We want to overwrite the NA values with zero - if you miss a homework you score zero on this homework

Google and Claude told me about the 'is.na()' fucntion. Let's see how it works.


We can use logicals to index a vector.

```{r}
y <- 1:5
y
y>3
y[y>3]
y[y>3] <- 100
y
```

```{r}
```


```{r}
getwd()
```

This is my working code that solves the problem for all my example student inputs
```{r}
# x=student3
# Mask NA values to zero
# x[ is.na(x)] <- 0
# Drop lowest score and get the mean
#mean( x[-which.min(x)])
```

```{r}
grade <- function(x) {
# Mask NA values to zero
  x[is.na(x)] <- 0
#Drop lowest score and get the mean
mean(x[-which.min(x)])}
```

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
gradebook
```

I can use the 'apply()' function if I figure out how to use the dam thing... 

```{r}
apply(gradebook, 1, grade)
```

```{r}
ans <- apply(gradebook, MARGIN = 1, FUN = grade)
which.max(ans)
```
> From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

We could calculate the 'mean()' score for each homework.

```{r}
apply(gradebook, 2 , mean)
```

```{r}
mask <- gradebook

mask[is.na(mask)] <- 0
hw.ave <- apply(mask, 2, mean)
hw.ave
which.min(hw.ave)
```

```{r}
apply(gradebook, 2, mean, na.rm=T)
```

We could take the sum 
```{r}
apply(gradebook, 2, sum, na.rm=T)
```

```{r}
cor(mask$hw5, ans)
```

```{r}
apply(mask, 2, cor, y=ans)
```
