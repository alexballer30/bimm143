---
title: "class10 : Structural Bioinformatics pt 1"
format: pdf
---


# The PDB database

First let's see what is in the PDB database, the main repository of protein structures.

Downloaded composition stats from: https://www.rcsb.org/stats/summary

For context: Release 2023_2024 of 13-Sep-2023 of UniProtKB/TrEMBL contains 251600768 sequence entries. 

https://tinyurl.com/statspdb

```{r}
stats <- read.csv("PDBstats.csv", row.names = 1)
stats
```

There is a problem here due to the commas in the numbers. This causes R to treat them as characters.

```{r}
x <- stats$X.ray
x
```

```{r}
as.numeric(gsub(",","",x))
```

```{r}
rm.comma <- function(x) {as.numeric(gsub(",","",x))}
```

```{r}
rm.comma(stats$EM)
```
I can use apply() to fix the whole table... 

```{r}
pdbstats <- apply(stats, 2, rm.comma)
rownames(pdbstats) <- rownames(stats)
head(pdbstats)
```

```{r}
totals <- apply(pdbstats,2,sum)
totals/totals["Total"]
```


>Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy?

```{r}
round(totals/totals["Total"]*100,2)
```


>Q2: What proportion of structures in the PDB are protein?

```{r}
round(pdbstats[1,"Total"] / sum(pdbstats[, "Total"])*100, 2)
```

>Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

Skip for time 

Protein structures in PDB as a fraction of UniProt seqeunces. 
See: https://www.uniprot.org/help/release-statistics

```{r}
round((pdbstats[1,"Total"]/251600768)*100,2)
```

Here is a lovely figure of HIP-Pr with the catalytic ASP residues, the MK1 compund and the all important water 308

![](1HSG.png)

>Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

The resolution can't see the small hydrogen atoms because the size is so small. 

>Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have?

HOH 308

>Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![](1HSG.png)

##The bio3d package for structural bioinformatics
```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
pdb
```

>Q7: How many amino acid residues are there in this pdb object? 

198

>Q8: Name one of the two non-protein residues? 

HOH

>Q9: How many protein chains are in this structure?

2 chains

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

#Predicting functional motions of a single structure
Let's finish today with a bioinformatics calculation to perdict the functional motions of a PB structure

```{r}
adk <- read.pdb("6s36")

```

```{r}
adk
```
```{r}
m <- nma(adk)
```


```{r, fig.height=3, fig.width=8}
plot(m)
mktrj(m,file="adk_m7.pdb")
```

```{r}
mktrj(m, file="adk_m7.pdb")
```

#4. Comparative structure analysis of Adenylate Kinase

We need some packages for today's class. These include 'bio3d' and 'msa'. 

We 'msa' package is from BioConductor. These packages focus on genomics type work and are managed by the 'BiocManager' package.

Install 'install.packages("BiocManager")' and then 'BiocManager::install("msa")' all entered in the R "brain" console.

>Q10. Which of the packages above is found only on BioConductor and not CRAN?

msa

>Q11. Which of the above packages is not found on BioConductor or CRAN?:

bio3d-view

>Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

True

```{r}
library(bio3d)
aa <- get.seq("1ake_A")
aa
```

>Q13. How many amino acids are in this sequence, i.e. how long is this sequence? 

214

```{r}
# Blast or hmmer search 
#b <- blast.pdb(aa)
```

```{r}
# Plot a summary of search results
#hits <- plot(b)
```

```{r}
# List out some 'top hits'
#head(hits$pdb.id)
```

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```


Now we can download all these structures for further analysis with the 'get.pdb()' function.

```{r}
# Download releated PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

No we have all these related structures we can Align and Supperpose... 

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```


```{r, fig.height= 4, fig.width= 8}
# Vector containing PDB codes for figure axis
ids <- basename.pdb(pdbs$id)

# Draw schematic alignment
plot(pdbs, labels=ids)
```




Now I can search the PDB database for related sequences:

Side-note: Let's annotate these structures(in other words find out what they are, what species they are from, stuff about the experiment they were solved in etc.)

For this we can use the 'pdb.annotate()'

```{r}
#anno <-pdb.annotate(hits$pdb.id)
anno <- pdb.annotate(ids)
unique(anno$source)
```

```{r}
#attributes(anno)
head(anno)
```


```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```


```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
grps.rd <- cutree(hc.rd, k=3)

plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)
```

# Class 11

```{r}
# Change this for YOUR results dir name
results_dir <- "hivpr_dimer_23119" 
```

```{r}
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)

# Print our PDB file names
basename(pdb_files)
```

```{r}
library(bio3d)

# Read all data from Models 
#  and superpose/fit coords

pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```
```{r}
pdbs
```

```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
```


```{r}

library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

```{r}
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

```{r}
core <- core.find(pdbs)
```

```{r}
core.inds <- print(core, vol=0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```

```{r}
pae1$max_pae
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```

```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

```{r}
dim(aln$ali)
```

```{r}
sim <- conserv(aln)
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

```{r}
m1.pdb <- read.pdb(pdb_files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```

```{r}
sessionInfo()
```


![](Monomer.png)

![](Dimer.png)

